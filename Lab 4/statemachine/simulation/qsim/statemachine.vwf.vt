// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2023 23:30:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          statemachine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module statemachine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg change;
reg clock;
reg enter;
reg equals;
reg resetn;
// wires                                               
wire alarm;
wire new;
wire open;

// assign statements (if any)                          
statemachine i1 (
// port map - connection between master ports and signals/registers   
	.alarm(alarm),
	.change(change),
	.clock(clock),
	.enter(enter),
	.equals(equals),
	.\new (new),
	.open(open),
	.resetn(resetn)
);
initial 
begin 
#800000 $finish;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	clock = #50000 1'b0;
	clock = #50000 1'b1;
	clock = #50000 1'b0;
	clock = #50000 1'b1;
	clock = #50000 1'b0;
	clock = #50000 1'b1;
	clock = #50000 1'b0;
	clock = #50000 1'b1;
	clock = #50000 1'b0;
	clock = #50000 1'b1;
	clock = #50000 1'b0;
	clock = #50000 1'b1;
	clock = #50000 1'b0;
	clock = #50000 1'b1;
end 

// resetn
initial
begin
	resetn = 1'b1;
	resetn = #180000 1'b0;
	resetn = #50000 1'b1;
end 

// enter
initial
begin
	enter = 1'b1;
	enter = #160000 1'b0;
	enter = #170000 1'b1;
	enter = #40000 1'b0;
	enter = #70000 1'b1;
	enter = #50000 1'b0;
	enter = #30000 1'b1;
	enter = #50000 1'b0;
	enter = #60000 1'b1;
	enter = #50000 1'b0;
end 

// change
initial
begin
	change = 1'b0;
	change = #230000 1'b1;
	change = #50000 1'b0;
end 

// equals
initial
begin
	equals = 1'b0;
	equals = #230000 1'b1;
	equals = #60000 1'b0;
	equals = #130000 1'b1;
	equals = #160000 1'b0;
end 
endmodule

