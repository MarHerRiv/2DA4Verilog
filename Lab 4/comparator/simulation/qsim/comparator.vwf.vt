// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2023 22:19:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          comparator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module comparator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] combo;
reg [3:0] x;
// wires                                               
wire equals;

// assign statements (if any)                          
comparator i1 (
// port map - connection between master ports and signals/registers   
	.combo(combo),
	.equals(equals),
	.x(x)
);
initial 
begin 
#800000 $finish;
end 

// x[3]
initial
begin
	x[3] = 1'b0;
	x[3] = #30000 1'b1;
	x[3] = #50000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #60000 1'b0;
	x[3] = #260000 1'b1;
	x[3] = #60000 1'b0;
	x[3] = #40000 1'b1;
	x[3] = #70000 1'b0;
	x[3] = #30000 1'b1;
	x[3] = #50000 1'b0;
	x[3] = #30000 1'b1;
	x[3] = #40000 1'b0;
end 

// x[2]
initial
begin
	x[2] = 1'b0;
	x[2] = #30000 1'b1;
	x[2] = #50000 1'b0;
	x[2] = #220000 1'b1;
	x[2] = #60000 1'b0;
	x[2] = #180000 1'b1;
	x[2] = #70000 1'b0;
	x[2] = #30000 1'b1;
	x[2] = #50000 1'b0;
end 

// x[1]
initial
begin
	x[1] = 1'b0;
	x[1] = #120000 1'b1;
	x[1] = #70000 1'b0;
	x[1] = #110000 1'b1;
	x[1] = #60000 1'b0;
	x[1] = #180000 1'b1;
	x[1] = #70000 1'b0;
end 

// x[0]
initial
begin
	x[0] = 1'b0;
	x[0] = #120000 1'b1;
	x[0] = #70000 1'b0;
	x[0] = #250000 1'b1;
	x[0] = #60000 1'b0;
	x[0] = #40000 1'b1;
	x[0] = #70000 1'b0;
end 

// combo[3]
initial
begin
	combo[3] = 1'b0;
	combo[3] = #120000 1'b1;
	combo[3] = #70000 1'b0;
	combo[3] = #250000 1'b1;
	combo[3] = #60000 1'b0;
	combo[3] = #40000 1'b1;
	combo[3] = #70000 1'b0;
	combo[3] = #130000 1'b1;
	combo[3] = #50000 1'b0;
end 

// combo[2]
initial
begin
	combo[2] = 1'b0;
	combo[2] = #340000 1'b1;
	combo[2] = #60000 1'b0;
	combo[2] = #140000 1'b1;
	combo[2] = #70000 1'b0;
end 

// combo[1]
initial
begin
	combo[1] = 1'b0;
	combo[1] = #30000 1'b1;
	combo[1] = #50000 1'b0;
	combo[1] = #40000 1'b1;
	combo[1] = #40000 1'b0;
	combo[1] = #180000 1'b1;
	combo[1] = #60000 1'b0;
	combo[1] = #40000 1'b1;
	combo[1] = #60000 1'b0;
	combo[1] = #40000 1'b1;
	combo[1] = #70000 1'b0;
end 

// combo[0]
initial
begin
	combo[0] = 1'b0;
	combo[0] = #30000 1'b1;
	combo[0] = #50000 1'b0;
	combo[0] = #40000 1'b1;
	combo[0] = #40000 1'b0;
	combo[0] = #380000 1'b1;
	combo[0] = #70000 1'b0;
end 
endmodule

