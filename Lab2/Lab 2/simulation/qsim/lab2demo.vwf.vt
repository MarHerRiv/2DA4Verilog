// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2023 20:44:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab2demo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2demo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg nx0;
reg nx1;
reg nx2;
reg nx3;
reg x0;
reg x1;
reg x2;
reg x3;
// wires                                               
wire nseg0;
wire nseg1;
wire nseg2;
wire nseg3;
wire nseg4;
wire nseg5;
wire nseg6;
wire seg0;
wire seg1;
wire seg2;
wire seg3;
wire seg4;
wire seg5;
wire seg6;

// assign statements (if any)                          
lab2demo i1 (
// port map - connection between master ports and signals/registers   
	.nseg0(nseg0),
	.nseg1(nseg1),
	.nseg2(nseg2),
	.nseg3(nseg3),
	.nseg4(nseg4),
	.nseg5(nseg5),
	.nseg6(nseg6),
	.nx0(nx0),
	.nx1(nx1),
	.nx2(nx2),
	.nx3(nx3),
	.seg0(seg0),
	.seg1(seg1),
	.seg2(seg2),
	.seg3(seg3),
	.seg4(seg4),
	.seg5(seg5),
	.seg6(seg6),
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.x3(x3)
);
initial 
begin 
#800000 $finish;
end 

// x3
initial
begin
	x3 = 1'b0;
	x3 = #400000 1'b1;
end 

// x2
initial
begin
	x2 = 1'b0;
	x2 = #200000 1'b1;
	x2 = #200000 1'b0;
	x2 = #200000 1'b1;
end 

// x1
initial
begin
	x1 = 1'b0;
	x1 = #100000 1'b1;
	x1 = #100000 1'b0;
	x1 = #100000 1'b1;
	x1 = #100000 1'b0;
	x1 = #100000 1'b1;
	x1 = #100000 1'b0;
	x1 = #100000 1'b1;
end 

// x0
initial
begin
	x0 = 1'b0;
	x0 = #50000 1'b1;
	x0 = #50000 1'b0;
	x0 = #50000 1'b1;
	x0 = #50000 1'b0;
	x0 = #50000 1'b1;
	x0 = #50000 1'b0;
	x0 = #50000 1'b1;
	x0 = #50000 1'b0;
	x0 = #50000 1'b1;
	x0 = #50000 1'b0;
	x0 = #50000 1'b1;
	x0 = #50000 1'b0;
	x0 = #50000 1'b1;
	x0 = #50000 1'b0;
	x0 = #50000 1'b1;
end 

// nx3
initial
begin
	nx3 = 1'b0;
	nx3 = #400000 1'b1;
end 

// nx2
initial
begin
	nx2 = 1'b0;
	nx2 = #200000 1'b1;
	nx2 = #200000 1'b0;
	nx2 = #200000 1'b1;
end 

// nx1
initial
begin
	nx1 = 1'b0;
	nx1 = #100000 1'b1;
	nx1 = #100000 1'b0;
	nx1 = #100000 1'b1;
	nx1 = #100000 1'b0;
	nx1 = #100000 1'b1;
	nx1 = #100000 1'b0;
	nx1 = #100000 1'b1;
end 

// nx0
initial
begin
	nx0 = 1'b0;
	nx0 = #50000 1'b1;
	nx0 = #50000 1'b0;
	nx0 = #50000 1'b1;
	nx0 = #50000 1'b0;
	nx0 = #50000 1'b1;
	nx0 = #50000 1'b0;
	nx0 = #50000 1'b1;
	nx0 = #50000 1'b0;
	nx0 = #50000 1'b1;
	nx0 = #50000 1'b0;
	nx0 = #50000 1'b1;
	nx0 = #50000 1'b0;
	nx0 = #50000 1'b1;
	nx0 = #50000 1'b0;
	nx0 = #50000 1'b1;
end 
endmodule

